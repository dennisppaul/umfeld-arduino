###################################################################################################
# 
# UMFELD
#
# see https://arduino.github.io/arduino-cli/latest/platform-specification/
# 
###################################################################################################

name=Umfeld
version=2.5.0

###################################################################################################
#
# COMPILE
#
###################################################################################################

# TODO find a way for `echo` to work on Windows too
# recipe.hooks.prebuild.01.pattern=echo "Umfeld               : " {version}
# # TODO WIP this could be a way to be a bit more flexible with compiler paths
# recipe.hooks.prebuild.02.pattern=echo "Compiler             : " {compiler.path}{compiler.c.cmd} 
# recipe.hooks.prebuild.03.pattern=echo "Build Path           : " {build.path}
# recipe.hooks.prebuild.04.pattern=echo "Build Variant Path   : " {build.variant.path}
# recipe.hooks.prebuild.05.pattern=echo "Runtime Platform Path: " {runtime.platform.path}
# recipe.hooks.prebuild.06.pattern=echo "KLST_ENV             : " {build.flags.board}
# #recipe.hooks.prebuild.XX.pattern=sh "{runtime.platform.path}/extras/check-for-tools.sh" # TODO <- could check for compiler here

###################################################################################################
#
# COMPILER PATHS
#
###################################################################################################

compiler.path.macosx  = /usr/bin/
compiler.path.linux   = /usr/bin/
compiler.path.windows = C:/msys64/ucrt64/bin/

###################################################################################################
#
# DEFINES (MACROS)
#
###################################################################################################

compiler.variant_define     = {build.variant_defines} -DBOARD_NAME_{build.board} -DVARIANT_H="{build.variant.path}/{build.variant_h}" {build.flags.print_debug}
compiler.umf_define.macosx  = {build.flags.opengl} -DSYSTEM_MACOS {compiler.variant_define}
compiler.umf_define.linux   = {build.flags.opengl} -DSYSTEM_UNIX  {compiler.variant_define}
compiler.umf_define.windows = {build.flags.opengl} -DSYSTEM_WINDOWS  {compiler.variant_define}
# compiler.umf_define.macosx  = -DUMF_ENV={build.flags.board} {build.flags.opengl} -DSYSTEM_MACOS
# compiler.umf_define.linux   = -DUMF_ENV={build.flags.board} {build.flags.opengl} -DSYSTEM_UNIX
# compiler.umf_define.windows = -DUMF_ENV={build.flags.board} {build.flags.opengl} -DSYSTEM_WINDOWS

compiler.klst_define=-DKLST_ENV={build.flags.board} -DKLST_EMU_SAMPLE_RATE={build.flags.sample_rate} -DKLST_EMU_AUDIO_BLOCK={build.flags.audioblock}

###################################################################################################
#
# INCLUDE FLAGS (SDL3 + dependencies)
#
###################################################################################################

compiler.SDL3_cflags.macosx  = -I/opt/homebrew/include/ -I/usr/local/include/ -I/opt/homebrew/include/SDL3 -I/usr/local/include/SDL3 -I/opt/homebrew/include/rtmidi/ -I/usr/local/include/rtmidi/ -I/opt/homebrew/include/freetype2/ -I/usr/local/include/freetype2/ -D_THREAD_SAFE -DGLM_ENABLE_EXPERIMENTAL -DSDL_MAIN_USE_CALLBACKS
compiler.SDL3_cflags.linux   = -I/usr/include/ -I/usr/include/SDL3 -I/usr/include/rtmidi -I/usr/include/freetype2 -D_THREAD_SAFE -DGLM_ENABLE_EXPERIMENTAL -DSDL_MAIN_USE_CALLBACKS
compiler.SDL3_cflags.windows = -IC:/msys64/ucrt64/include -IC:/msys64/ucrt64/include/SDL3 -IC:/msys64/ucrt64/include/freetype2 -IC:/msys64/ucrt64/include/rtmidi -D_THREAD_SAFE -DGLM_ENABLE_EXPERIMENTAL -DSDL_MAIN_USE_CALLBACKS

###################################################################################################
#
# LIBS
#
###################################################################################################

# TODO @video @capture
# add ffmpeg libraries
# compiler.umfeld_libs.macosx   = -L/opt/homebrew/lib -L/usr/local/lib -framework OpenGL -lharfbuzz -lfreetype -lportaudio -lcurl -lncurses -lrtmidi -L/opt/homebrew/Cellar/ffmpeg/8.0_1/lib -lavdevice -lavformat -lavcodec -lswscale -lswresample -lavutil
compiler.umfeld_libs.macosx   = -L/opt/homebrew/lib -L/usr/local/lib -framework OpenGL -lharfbuzz -lfreetype -lportaudio -lcurl -lncurses -lrtmidi
compiler.umfeld_libs.linux    = -L/usr/lib -L/usr/local/lib -lGL -lharfbuzz -lfreetype -lportaudio -lcurl -lncurses -lrtmidi
compiler.umfeld_libs.windows  = -LC:/msys64/ucrt64/lib -lopengl32 -lharfbuzz -lfreetype -lportaudio -lncurses -lcurl -lssl -lcrypto -lidn2 -lssh2 -lpsl -lzstd -lnghttp2 -lbrotlidec -lcares -lz -lws2_32 -lbcrypt -lcrypt32 -lole32 -lcomdlg32 -lwinmm -lrtmidi

compiler.SDL3_libs.macosx     = -L/opt/homebrew/lib -L/usr/local/lib -lSDL3
compiler.SDL3_libs.linux      = -L/usr/lib -lSDL3
compiler.SDL3_libs.windows    = -LC:/msys64/ucrt64/lib -lSDL3

###################################################################################################
#
# GENERAL UMFELD FLAGS
#
###################################################################################################

compiler.umfeld_flags = -I{runtime.platform.path}/cores/sdl -I{runtime.platform.path}/cores/sdl/umfeld/include -I{runtime.platform.path}/cores/sdl/umfeld/include/libraries -I{runtime.platform.path}/cores/sdl/umfeld/include/libraries/clipper2 -I{runtime.platform.path}/cores/sdl/umfeld/include/libraries/dr_libs -I{runtime.platform.path}/cores/sdl/umfeld/include/libraries/ip -I{runtime.platform.path}/cores/sdl/umfeld/include/libraries/libtess2 -I{runtime.platform.path}/cores/sdl/umfeld/include/libraries/osc -I{runtime.platform.path}/cores/sdl/umfeld/include/libraries/pffft -I{runtime.platform.path}/cores/sdl/umfeld/include/shaders -I{runtime.platform.path}/cores/sdl/umfeld/external/ {build.flags.enable_portaudio}
# TODO @video @capture
# add `{build.flags.enable_video} {build.flags.enable_capture}`

###################################################################################################
#
# C COMPILER
#
###################################################################################################

compiler.warn.silence           = -Wno-unused-function -Wno-unused-variable -Wno-cpp

compiler.c.cmd                  = gcc
compiler.c.std                  = c17

compiler.c.flags.macosx         = -c -Wall -std={compiler.c.std} {compiler.umf_define} {compiler.klst_define} {compiler.warn.silence}
compiler.c.flags.linux          = -c -g -MMD -Wall -flto -std={compiler.c.std} {compiler.umf_define} {compiler.klst_define} {compiler.warn.silence}
compiler.c.flags.windows        = -c -g3 -Wall -std={compiler.c.std} {compiler.umf_define} {compiler.klst_define} {compiler.warn.silence}

recipe.c.o.pattern="{compiler.path}{compiler.c.cmd}" {compiler.c.flags} {includes} {compiler.SDL3_cflags} {compiler.umfeld_flags} "{source_file}" -o "{object_file}"

###################################################################################################
#
# C++ COMPILER
#
###################################################################################################

compiler.cpp.cmd                = g++
compiler.cpp.std                = c++17

compiler.cpp.flags.macosx       = -c -Wall -std={compiler.cpp.std} -pthread {compiler.umf_define} {compiler.klst_define} {compiler.warn.silence}
compiler.cpp.flags.linux        = -c -g -MMD -Wall -flto -std={compiler.cpp.std} -Wno-long-long -pthread {compiler.umf_define} {compiler.klst_define} {compiler.warn.silence}
compiler.cpp.flags.windows      = -c -g3 -Wall -std={compiler.cpp.std} -Wno-long-long -pthread {compiler.umf_define} {compiler.klst_define} {compiler.warn.silence}
                                                               # TODO maybe switch to -mthreads

recipe.cpp.o.pattern="{compiler.path}{compiler.cpp.cmd}" {compiler.cpp.flags} {includes} {compiler.SDL3_cflags} {compiler.umfeld_flags} "{source_file}" -o "{object_file}"

###################################################################################################
#
# ARCHIVE
#
###################################################################################################

compiler.ar.cmd=ar
compiler.ar.flags=-rcs
recipe.ar.pattern="{compiler.path}{compiler.ar.cmd}" {compiler.ar.flags} "{archive_file_path}" "{object_file}"

###################################################################################################
#
# COMBINE/LINK
#
###################################################################################################

compiler.c.linker.cmd=g++
# compiler.ldflags=-v
compiler.ldflags=
# TODO @infoplist
# compiler.ldflags.macosx={build.flags.add_info_plist}
recipe.c.combine.pattern="{compiler.path}{compiler.c.linker.cmd}" {compiler.ldflags} -o "{build.path}/{build.project_name}.exec" {object_files} {archive_file_path} {compiler.umfeld_libs} {compiler.SDL3_libs} -lm

# copy run script to `/tmp/` ( or similar )
# compiler.execpath=sketch-exec
# compiler.copy.macosx={compiler.execpath}/copy-sketch-exec.macos.sh
# compiler.copy.linux={compiler.execpath}/copy-sketch-exec.linux.sh
# compiler.copy.windows=
# compiler.exec.macosx={compiler.execpath}/sketch-exec.sh
# compiler.exec.linux={compiler.execpath}/sketch-exec.sh
# compiler.exec.windows=
#recipe.hooks.linking.postlink.1.pattern="{build.core.path}/../../{compiler.copy}" "{build.core.path}/../../{compiler.exec}"

###################################################################################################
#
# PREPROCESS
#
###################################################################################################

preproc.includes.cmd.macosx=g++
preproc.includes.cmd.linux=g++
preproc.includes.cmd.windows=g++
preproc.includes.flags=-w -x c++ -M -MG -MP
recipe.preproc.includes="{compiler.path}{preproc.includes.cmd}" {compiler.cpp.flags} {preproc.includes.flags} {compiler.cpp.extra_flags} {build.extra_flags} {includes} {compiler.SDL3_cflags} {compiler.umfeld_flags} "{source_file}"

preproc.macros.cmd.macosx=g++
preproc.macros.cmd.linux=g++
preproc.macros.cmd.windows=g++
preproc.macros.flags=-w -x c++ -E -CC 
recipe.preproc.macros="{compiler.path}{preproc.macros.cmd}" {compiler.cpp.flags} {preproc.macros.flags} {compiler.cpp.extra_flags} {build.extra_flags} {includes} {compiler.SDL3_cflags} {compiler.umfeld_flags} "{source_file}" -o "{preprocessed_file_path}"

###################################################################################################
#
# UPLOAD
#
###################################################################################################

# run sketch via script ( this prevents the sketch from being shut down by Arduino )
# tools.sdlexecprog.exec.macosx={build.path}/sketch-exec.sh
# tools.sdlexecprog.exec.linux={build.path}/sketch-exec.sh
# tools.sdlexecprog.exec.windows=
# TODO problem with dialog box quitting 
# cannot use the upload script when also using the dialog box with e.g `Card.begin()`
tools.sdlexecprog.upload.pattern="{build.path}/{build.project_name}.exec" {upload.options}
# TODO sketchpath should either point to current sketch path or tmp directory
# --sketchpath={build.core.path} {runtime.platform.path} {build.path} {build.project_name} {build.source.path} {build.source.path} {sketch_path}
tools.sdlexecprog.upload.params.verbose=
tools.sdlexecprog.upload.params.quiet=

# TODO find a way for `echo` to work on Windows too
# recipe.hooks.postbuild.01.pattern=echo && echo Executable binary located at: "{build.path}/{build.project_name}.exec"
# #recipe.hooks.postbuild.01.pattern=printf "\n\nexecutable binary located at: {build.path}/{build.project_name}.exec "
# # recipe.hooks.postbuild.02.pattern={build.path}/{build.project_name}.exec
# TODO check if `mkdir` and `cp` works on windows … probably not
recipe.hooks.postbuild.01.pattern=mkdir -p "{sketch_path}/data" 
recipe.hooks.postbuild.02.pattern=cp -R "{sketch_path}/data" "{build.path}/"
###################################################################################################
#
# CLI
#
###################################################################################################

# sketches can also be compiled and run from CLI e.g:
# 
# arduino-cli compile -v -u -b umfeld-arduino:umfeld:UMFELD ./umfeld/examples/test
# arduino-cli compile -v -u -b umfeld-arduino:umfeld:KLST_EMU ./umfeld/examples/test
